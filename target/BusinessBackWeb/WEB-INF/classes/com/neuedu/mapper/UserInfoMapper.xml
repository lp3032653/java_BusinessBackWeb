<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.neuedu.dao.UserInfoMapper">
  <resultMap id="BaseResultMap" type="com.neuedu.pojo.UserInfo">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="question" jdbcType="VARCHAR" property="question" />
    <result column="answer" jdbcType="VARCHAR" property="answer" />
    <result column="role" jdbcType="INTEGER" property="role" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from neuedu_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.neuedu.pojo.UserInfo">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into neuedu_user (id, username, password, 
      email, phone, question, 
      answer, role, create_time, 
      update_time)
    values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{question,jdbcType=VARCHAR}, 
      #{answer,jdbcType=VARCHAR}, #{role,jdbcType=INTEGER}, now(),
    now())
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.neuedu.pojo.UserInfo">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update neuedu_user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      question = #{question,jdbcType=VARCHAR},
      answer = #{answer,jdbcType=VARCHAR},
      role = #{role,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <!--  根据选择的更新用户信息  -->
  <update id="updateBySelectedActive" parameterType="com.neuedu.pojo.UserInfo">
    update neuedu_user
    <set>
    <if test="password!=null">
      password=#{password},
    </if>
    <if test="email!=null">
      email=#{email},
    </if>
    <if test="question!=null">
      question=#{question},
    </if>
    <if test="answer!=null">
      answer=#{answer},
    </if>
    <if test="username!=null">
      username=#{username},
    </if>
    <if test="phone!=null">
      phone=#{phone},
    </if>
    </set>
    where id=#{id}

  </update>
  


  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select id, username, password, email, phone, question, answer, role, create_time, 
    update_time
    from neuedu_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select id, username, password, email, phone, question, answer, role, create_time, 
    update_time
    from neuedu_user
  </select>

  <!--  检查用户名是否存在  -->
  <select id="checkUsername" parameterType="string" resultType="int">
    select count(1) from neuedu_user where username=#{username} <!--  约定参数名字和接口中的一致  -->
  </select>

  <!--  根据用户名和密码查询信息 -->
  <select id="selectLogin" parameterType="map" resultMap="BaseResultMap">
    select id, username, password, email, phone, question, answer, role, create_time,
    update_time from neuedu_user where username=#{username} and password=#{password}
  </select>

  <!--  检查邮箱是否存在  -->
  <select id="checkEmail" parameterType="string" resultType="int">
    select count(1) from neuedu_user where email=#{email} <!--  约定参数名字和接口中的一致  -->
  </select>

  <!--  获取密保问题 -->
  <select id="selectQuestionByUsername" parameterType="string" resultType="string">
    select question from neuedu_user where username=#{username}
  </select>

  <!--  获取密保答案 -->
  <select id="check_forget_answer" parameterType="map" resultType="int">
    select count(1) from neuedu_user where username=#{username} and question=#{question} and answer=#{answer}
  </select>

  <update id="updatePasswordByUsername" parameterType="map">
    update neuedu_user set password=#{password},update_time=now() where username=#{username}
  </update>

  <select id="selectCountByUserIdAndPassowrd" resultType="int" parameterType="map">
    select count(1) from neuedu_user where id=#{userid} and password=#{password}
  </select>

  <select id="checkEmailByUseridAndEamil" parameterType="map" resultType="int">
    SELECT  count(1) from neuedu_user where id!=#{userid} and email=#{emailNew}
  </select>



</mapper>